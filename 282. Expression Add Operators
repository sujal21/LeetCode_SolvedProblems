public class Solution {
    private List<String> ans = new ArrayList<>();

    public List<String> addOperators(String num, int target) {
        char[] operators = {'+', '-', '*'};
        solve(num, operators, target, 0, "", 0, 0);
        return ans;
    }

    private void solve(String num, char[] operators, int target, int idx, String expression, long currentVal, long lastOperand) {
        if (idx == num.length()) {
            if (currentVal == target) {
                ans.add(expression);
            }
            return;
        }

        for (int i = idx; i < num.length(); i++) {
            if (i > idx && num.charAt(idx) == '0') {
                // Avoid cases like "05"
                break;
            }

            long currentNum = Long.parseLong(num.substring(idx, i + 1));

            if (idx == 0) {
                solve(num, operators, target, i + 1, expression + currentNum, currentNum, currentNum);
            } else {
                solve(num, operators, target, i + 1, expression + "+" + currentNum, currentVal + currentNum, currentNum);
                solve(num, operators, target, i + 1, expression + "-" + currentNum, currentVal - currentNum, -currentNum);
                solve(num, operators, target, i + 1, expression + "*" + currentNum, currentVal - lastOperand + lastOperand * currentNum, lastOperand * currentNum);
            }
        }
    }
}
