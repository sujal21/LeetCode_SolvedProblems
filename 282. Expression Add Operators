public class Solution {
    private List<String> ans = new ArrayList<>();

    public List<String> addOperators(String num, int target) {
        char[] operators = {'+', '-', '*'};
        solve(num, operators, target, 0, "");
        return ans;
    }

    private int evaluate(String expression) {
        Stack<Integer> stack = new Stack<>();
        char operator = '+';
        int num = 0;

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if (Character.isDigit(ch)) {
                num = num * 10 + (ch - '0');
            }

            if (!Character.isDigit(ch) && !Character.isWhitespace(ch) || i == expression.length() - 1) {
                if (operator == '+') {
                    stack.push(num);
                } else if (operator == '-') {
                    stack.push(-num);
                } else if (operator == '*') {
                    stack.push(stack.pop() * num);
                }

                operator = ch;
                num = 0;
            }
        }

        int result = 0;
        while (!stack.isEmpty()) {
            result += stack.pop();
        }

        return result;
    }

    private void solve(String num, char[] operators, int target, int idx, String expression) {
        if (idx == num.length()) {
            int result = evaluate(expression);
            if (result == target && !ans.contains(expression)) {
                ans.add(expression);
            }
            return;
        }

        for (int i = 0; i < operators.length; i++) {
            if (idx != num.length() - 1) {
                solve(num, operators, target, idx + 1, expression + num.charAt(idx) + operators[i]);
            } else {
                solve(num, operators, target, idx + 1, expression + num.charAt(idx));
            }
        }
    }
}
