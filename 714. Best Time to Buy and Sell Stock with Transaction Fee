class Solution {
//     public int solve(int[] prices,int idx,int buy,int fee,int[][] dp){
//         if(idx==prices.length){
//             return 0;
//         }
//         if(dp[idx][buy]!=-1){
//             return dp[idx][buy];
//         }
//         int profit=0;
//         if(buy==1){
//             profit=Math.max(-prices[idx]+solve(prices,idx+1,0,fee,dp),0+solve(prices,idx+1,1,fee,dp));
//         }else{
//             profit=Math.max(prices[idx]+solve(prices,idx+1,1,fee,dp)-fee,0+solve(prices,idx+1,0,fee,dp));
//         }
//         return dp[idx][buy]=profit;
//     }
//     public int maxProfit(int[] prices, int fee) {
//         int[][] dp=new int[prices.length+1][2];
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return solve(prices,0,1,fee,dp);
//     }
// }

class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n=prices.length;
        int[][] dp=new int[n+1][2];

        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                if(j==1){
                    dp[i][j]=Math.max(-prices[i]+dp[i+1][0],dp[i+1][1]);
                }else{
                    dp[i][j]=Math.max(prices[i]+dp[i+1][1]-fee,dp[i+1][0]);
                }
            }
        }

        return dp[0][1];
    }
}
