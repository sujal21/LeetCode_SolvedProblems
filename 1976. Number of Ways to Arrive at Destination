class Pair {
    int node;
    long dist;

    Pair(int node, long dist) {
        this.node = node;
        this.dist = dist;
    }
}

class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < roads.length; i++) {
            adj.get(roads[i][0]).add(new Pair(roads[i][1], roads[i][2]));
            adj.get(roads[i][1]).add(new Pair(roads[i][0], roads[i][2]));
        }

        long[] dist = new long[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[0] = 0;
        ways[0] = 1;
        int mod = (int) 1e9 + 7;

        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> Long.compare(x.dist, y.dist));
        pq.add(new Pair(0, 0));

        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            int node = p.node;
            long cost = p.dist;

            for (Pair it : adj.get(node)) {
                int adjN = it.node;
                long adjW = it.dist;

                if (adjW + cost < dist[adjN]) {
                    dist[adjN] = adjW + cost;
                    ways[adjN] = ways[node];
                    pq.add(new Pair(adjN, adjW + cost));
                } else if (adjW + cost == dist[adjN]) {
                    ways[adjN] = (ways[adjN] + ways[node]) % mod;
                }
            }
        }
        return ways[n - 1] % mod;
    }
}
