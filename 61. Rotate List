/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static void rev(ArrayList<Integer> list,int start,int end){
        while(start<end){
            int temp=list.get(start);
            list.set(start,list.get(end));
            list.set(end,temp);
            start++;
            end--;
        }
    }
public ListNode rotateRight(ListNode head, int k) {
    if (head == null || k==0) {
        return head;
    }
    ListNode temp = head;
    ArrayList<Integer> list = new ArrayList<>();
    int count = 0;
    while (temp != null) {
        list.add(temp.val);
        count++;
        temp = temp.next;
    }
    k = k % count;
    if(k==0){
        return head;
    }
    rev(list, 0, list.size() - 1);
    rev(list, 0, k - 1);
    rev(list, k, list.size() - 1);
    
    temp = head;
    for (int i = 0; i < list.size(); i++) {
        temp.val = list.get(i);
        temp = temp.next;
    }
    return head;
}

}
