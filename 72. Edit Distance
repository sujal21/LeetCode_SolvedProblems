class Solution {
    // public int solve(String a,String b,int i,int j,int[][] dp){
    //     if(i<0){
    //         return j+1;
    //     }
    //     if(j<0){
    //         return i+1;
    //     }
    //     if(a.charAt(i)==b.charAt(j)){
    //         return 0+solve(a,b,i-1,j-1,dp);
    //     }
    //     if(dp[i][j]!=-1){
    //         return dp[i][j];
    //     }
    //     int insert=1+solve(a,b,i,j-1,dp);
    //     int delete=1+solve(a,b,i-1,j,dp);
    //     int replace=1+solve(a,b,i-1,j-1,dp);
    //     return dp[i][j]=Math.min(insert,Math.min(delete,replace));
    // }
    public int minDistance(String word1, String word2) {
        // int[][] dp=new int[word1.length()+1][word2.length()+1];
        // for(int[] row:dp){
        //     Arrays.fill(row,-1);
        // }
        // return solve(word1,word2,word1.length()-1,word2.length()-1,dp);

        int len1=word1.length();
        int len2=word2.length();

        int[][] dp=new int[len1+1][len2+1];

        for(int i=0;i<=len1;i++){
            dp[i][0]=i;
        }

        for(int i=0;i<=len2;i++){
            dp[0][i]=i;
        }

        for(int i=1;i<=len1;i++){
            for(int j=1;j<=len2;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=0+dp[i-1][j-1];
                }else{
                    int insert=1+dp[i][j-1];
                    int delete=1+dp[i-1][j];
                    int replace=1+dp[i-1][j-1];
                    dp[i][j]=Math.min(insert,Math.min(delete,replace));
                }
            }
        }
        return dp[len1][len2];
    }
}
