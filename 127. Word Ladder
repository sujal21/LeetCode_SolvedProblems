class Pair{
    String data;
    int steps;
    Pair(String data,int steps){
        this.data=data;
        this.steps=steps;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q=new LinkedList<>();
        Set<String> set=new HashSet<>();
        for(int i=0;i<wordList.size();i++){
            set.add(wordList.get(i));
        }
        q.add(new Pair(beginWord,1));

        while(!q.isEmpty()){
            String data=q.peek().data;
            int steps=q.peek().steps;
            q.remove();

            if(data.equals(endWord)){
                return steps;
            }

            for(int i=0;i<data.length();i++){
                for(char ch='a';ch<='z';ch++){
                    char[] arr=data.toCharArray();
                    arr[i]=ch;

                    String newString=new String(arr);
                    if(set.contains(newString)){
                        set.remove(newString);
                        q.add(new Pair(newString,steps+1));
                    }
                }
            }
        }
        return 0;
    }
}
