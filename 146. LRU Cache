class LRUCache {
    Node head=new Node(0,0),tail=new Node(0,0);
    HashMap<Integer,Node> mp=new HashMap<>();
    int capacity;

    public LRUCache(int capacity) {
        this.capacity=capacity;
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        if(mp.containsKey(key)){
            Node data=mp.get(key);
            //we have to now remove it and insert it at last as it is the most recently used one.
            remove(data);
            insert(data);
            return data.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        //if key value pair is already present,just remove it and insert so that it becomes most recently used one.
        if(mp.containsKey(key)){
            remove(mp.get(key));
        }
        //if capaccity is full
        if(mp.size()==capacity){
            remove(tail.prev);
        }
        insert(new Node(key,value));
    }
    void remove(Node node){
        mp.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    void insert(Node node){
        mp.put(node.key,node);
        Node headNext=head.next;
       
        node.prev=head;
        node.next=headNext;

        head.next=node;
        headNext.prev=node;
        
    }
    class Node{
        Node prev,next;
        int key,value;
        Node(int key,int value){
            this.key=key;
            this.value=value;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
