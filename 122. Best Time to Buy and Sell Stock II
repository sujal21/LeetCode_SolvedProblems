// class Solution {
//     public int solve(int idx,boolean canBuy,int[] prices){
//         if(idx==prices.length){
//             return 0;
//         }
//         int profit=0;
//         if(canBuy==true){
//             profit=Math.max(-prices[idx]+solve(idx+1,false,prices),0+solve(idx+1,true,prices));
//         }else{
//             profit=Math.max(prices[idx]+solve(idx+1,true,prices),0+solve(idx+1,false,prices));
//         }
//         return profit;
//     }
//     public int maxProfit(int[] prices) {
//         return solve(0,true,prices);
//     }
// }

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];

        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        dp[n][0] = 0;

        for (int i = n - 1; i >= 0; i--) {
            dp[i][0] = Math.max(-prices[i] + dp[i + 1][1], dp[i + 1][0]);
            dp[i][1] = Math.max(prices[i] + dp[i + 1][0], dp[i + 1][1]);
        }

        return dp[0][0];
    }
}
