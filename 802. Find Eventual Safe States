class Solution {
    public boolean dfs(int node,int[] vis,int[] pathvis,int[] check,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        pathvis[node]=1;
        check[node]=0;

        for(Integer it:adj.get(node)){
            if(vis[it]==0){
                if(dfs(it,vis,pathvis,check,adj)){
                    return true;
                }
            }else if(vis[it]==1 && pathvis[it]==1){
                return true;
            }
        }
        check[node]=1;
        pathvis[node]=0;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;

        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n;i++){
            int len=graph[i].length;
            for(int j=0;j<len;j++){
                adj.get(i).add(graph[i][j]);
            }
        }

        int[] vis=new int[n];
        int[] pathvis=new int[n];
        int[] check=new int[n];

        for(int i=0;i<n;i++){
            if(vis[i]==0){
                dfs(i,vis,pathvis,check,adj);
            }
        }

        List<Integer> ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(check[i]==1){
                ans.add(i);
            }
        }

        return ans;
    }
}
