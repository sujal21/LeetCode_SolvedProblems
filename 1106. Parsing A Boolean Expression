class Solution {
    public boolean parseBoolExpr(String expression) {
        Stack<Character> st = new Stack<>();
        for (int i = 0; i < expression.length(); i++) {
            if (expression.charAt(i) == ',') {
                continue;
            }
            if (expression.charAt(i) != ')') {
                st.push(expression.charAt(i));
            }
            boolean hasTrue = false;
            boolean hasFalse = false;
            if (expression.charAt(i) == ')') {
                while (st.peek() != '(') {
                    char ch = st.pop();
                    if (ch == 't') {
                        hasTrue = true;
                    } else {
                        hasFalse = true; 
                    }
                }
                st.pop(); // Pop '('
                char op = st.pop(); 

                if (op == '&') {
                    st.push((hasFalse == true) ? 'f' : 't');
                } else if (op == '|') {
                    st.push((hasTrue == true) ? 't' : 'f');
                } else if (op == '!') {
                    st.push((hasFalse == true) ? 't' : 'f'); 
                }
            }
        }
        return (st.pop() == 't') ? true : false;
    }
}
