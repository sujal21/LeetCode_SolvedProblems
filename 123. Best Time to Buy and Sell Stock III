// class Solution {
//     public int solve(int[] prices,int idx,int buy,int cap,int[][][] dp){
//         if(idx==prices.length){
//             return 0;
//         }
//         if(cap==0){
//             return 0;
//         }
//         if(dp[idx][buy][cap]!=-1){
//             return dp[idx][buy][cap];
//         }
//         int profit=0;
//         if(buy==1){
//             profit=Math.max(-prices[idx]+solve(prices,idx+1,0,cap,dp),0+solve(prices,idx+1,1,cap,dp));
//         }else{
//             profit=Math.max(prices[idx]+solve(prices,idx+1,1,cap-1,dp),0+solve(prices,idx+1,0,cap,dp));
//         }
//         return dp[idx][buy][cap]=profit;
//     }
//     public int maxProfit(int[] prices) {
//         int[][][] dp=new int[prices.length+1][2][3];
//         for(int[][] rows:dp){
//             for(int[] row:rows){
//                 Arrays.fill(row,-1);
//             }
//         }
//         return solve(prices,0,1,2,dp);
//     }
// }


class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][3];

        // for (int i = 0; i <= n; i++) {
        //     dp[i][0][0] = 0;
        //     dp[i][1][0] = 0;
        // }

        // for (int j = 0; j <= 2; j++) {
        //     dp[n][0][j] = 0;
        // }

        for (int i = n - 1; i >= 0; i--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 0; cap <= 2; cap++) {
                    if (cap == 0) {
                        dp[i][buy][cap] = 0;
                    } else {
                        int profit = 0;
                        if (buy == 1) {
                            profit = Math.max(-prices[i] + dp[i + 1][0][cap], 0 + dp[i + 1][1][cap]);
                        } else {
                            profit = Math.max(prices[i] + dp[i + 1][1][cap - 1], 0 + dp[i + 1][0][cap]);
                        }
                        dp[i][buy][cap] = profit;
                    }
                }
            }
        }
        return dp[0][1][2];
    }
}
