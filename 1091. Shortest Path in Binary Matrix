class Values {
    int dist;
    int r;
    int c;

    Values(int dist, int r, int c) {
        this.dist = dist;
        this.r = r;
        this.c = c;
    }
}

public class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0]==1 || grid[n-1][n-1]==1){
            return -1;
        }
        int[][] dist = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j] = Integer.MAX_VALUE;
            }
        }

        Queue<Values> q = new LinkedList<>();
        q.add(new Values(1, 0, 0));
        dist[0][0] = 1;

        int[] rows = {-1, -1, 0, 1, 1, 1, 0, -1};
        int[] cols = {0, 1, 1, 1, 0, -1, -1, -1};

        while (!q.isEmpty()) {
            Values curr = q.poll();
            int row = curr.r;
            int col = curr.c;

            for (int i = 0; i < 8; i++) {
                int nrow = row + rows[i];
                int ncol = col + cols[i];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < n && grid[nrow][ncol] == 0 && curr.dist + 1 < dist[nrow][ncol]) {
                    dist[nrow][ncol] = curr.dist + 1;
                    q.add(new Values(curr.dist + 1, nrow, ncol));
                }
            }
        }

        return dist[n - 1][n - 1] == Integer.MAX_VALUE ? -1 : dist[n - 1][n - 1];
    }
}
