class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][k+1];

        // for (int i = 0; i <= n; i++) {
        //     dp[i][0][0] = 0;
        //     dp[i][1][0] = 0;
        // }

        // for (int j = 0; j <= k; j++) {
        //     dp[n][0][j] = 0;
        // }

        for (int i = n - 1; i >= 0; i--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 0; cap <= k; cap++) {
                    if (cap == 0) {
                        dp[i][buy][cap] = 0;
                    } else {
                        int profit = 0;
                        if (buy == 1) {
                            profit = Math.max(-prices[i] + dp[i + 1][0][cap], 0 + dp[i + 1][1][cap]);
                        } else {
                            profit = Math.max(prices[i] + dp[i + 1][1][cap - 1], 0 + dp[i + 1][0][cap]);
                        }
                        dp[i][buy][cap] = profit;
                    }
                }
            }
        }
        return dp[0][1][k];
    }
}
