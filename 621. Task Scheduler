class Solution {
    public int leastInterval(char[] tasks, int n) {
        Map<Character, Integer> map = new HashMap<>();
        for (char task : tasks) {
            map.put(task, map.getOrDefault(task, 0) + 1);
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        pq.addAll(map.values());

        int res = 0;
        while (!pq.isEmpty()) {
            int time = 0;
            List<Integer> temp = new ArrayList<>();
            for (int i = 0; i < n + 1; i++) {
                if (!pq.isEmpty()) {
                    temp.add(pq.remove() - 1);
                    time++;
                }
            }
            for (int t : temp) {
                if (t > 0) {
                    pq.add(t);
                }
            }
            res += pq.isEmpty() ? time : n + 1;
        }
        return res;
    }
}
