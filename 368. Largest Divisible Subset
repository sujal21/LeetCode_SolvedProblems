class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if (nums == null || nums.length == 0) {
            return new ArrayList<>();
        }

        Arrays.sort(nums);

        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        int[] hash = new int[nums.length];

        int maxi = 0;
        int lastidx = 0;

        for (int i = 0; i < nums.length; i++) {
            hash[i] = i;
            for (int prev = 0; prev < i; prev++) {
                if (nums[i] % nums[prev] == 0 && dp[prev] + 1 > dp[i]) {
                    dp[i] = dp[prev] + 1;
                    hash[i] = prev;
                }
            }
            if (dp[i] > maxi) {
                maxi = dp[i];
                lastidx = i;
            }
        }

        List<Integer> lt = new ArrayList<>();
        while (hash[lastidx] != lastidx) {
            lt.add(nums[lastidx]);
            lastidx = hash[lastidx];
        }
        lt.add(nums[lastidx]);

        Collections.reverse(lt);
        return lt;
    }
}
