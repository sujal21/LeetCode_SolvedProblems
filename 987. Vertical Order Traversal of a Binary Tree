/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Point{
    TreeNode root;
    int x;
    int y;
    public Point(TreeNode root,int x,int y){
        this.root=root;
        this.x=x;
        this.y=y;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res=new ArrayList<>();
        if(root==null){
            return res;
        }
        Map<Integer,PriorityQueue<Point>> map=new HashMap<>();
        Comparator<Point> comparator=(a,b)->{
            if(a.y==b.y){
                return a.root.val-b.root.val;
            }else{
                return a.y-b.y;
            }
        };
        int minIdx=0;
        int maxIdx=0;
        Queue<Point> q=new LinkedList<>();
        q.offer(new Point(root,0,0));
        while(!q.isEmpty()){
            Point p=q.poll();
            root=p.root;
            map.putIfAbsent(p.x,new PriorityQueue<>(comparator));
            map.get(p.x).add(p);
            minIdx=(int)Math.min(minIdx,p.x);
            maxIdx=(int)Math.max(maxIdx,p.x);
            if(root.left!=null){
                q.offer(new Point(root.left,p.x-1,p.y+1));
            }
            if(root.right!=null){
                q.offer(new Point(root.right,p.x+1,p.y+1));
            }
        }
        for(int i=minIdx;i<=maxIdx;i++){
            PriorityQueue<Point> pq=map.get(i);
            List<Integer> lt=new ArrayList<>();
            while(!pq.isEmpty()){
                lt.add(pq.poll().root.val);
            }
            res.add(lt);
        }
        return res;
    }
}
