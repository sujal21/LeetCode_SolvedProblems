class Node{
    Node[] links=new Node[26];
    boolean flag=false;

    public Node(){

    }

    boolean containsKey(char c){
        return (links[c-'a']!=null);
    }

    Node get(char c){
        return links[c-'a'];
    }

    void put(char c,Node node){
        links[c-'a']=node;
    }

    void setEnd(){
        flag=true;
    }

    boolean isEnd(){
        return flag;
    }
}
class Trie {

    private Node root;

    public Trie() {
        root=new Node();
    }
    
    public void insert(String word) {
        Node start=root;
        for(int i=0;i<word.length();i++){
            if(!start.containsKey(word.charAt(i))){
                start.put(word.charAt(i),new Node());
            }
            start=start.get(word.charAt(i));
        }
        start.setEnd();
    }
    
    public boolean search(String word) {
        Node start=root;
        for(int i=0;i<word.length();i++){
            if(!start.containsKey(word.charAt(i))){
                return false;
            }
            start=start.get(word.charAt(i));
        }
        if(start.isEnd()==true){
            return true;
        }else{
            return false;
        }
    }
    
    public boolean startsWith(String prefix) {
        Node start=root;
        for(int i=0;i<prefix.length();i++){
            if(!start.containsKey(prefix.charAt(i))){
                return false;
            }
            start=start.get(prefix.charAt(i));
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
