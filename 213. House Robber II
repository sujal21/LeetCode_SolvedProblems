class Solution {
    public static int money(int idx, int n, int[] dp, int[] nums) {
        if (idx >= n) {
            return 0;
        }

        if (dp[idx] != -1) {
            return dp[idx];
        }

        int take = nums[idx] + money(idx + 2, n, dp, nums);
        int skip = money(idx + 1, n, dp, nums);

        return dp[idx] = Math.max(take, skip);
    }

    public int rob(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }

        if (nums.length == 2) {
            return Math.max(nums[0], nums[1]);
        }

        int n = nums.length;
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);

        // take first house
        int first = money(0, n - 1, dp, nums);

        // reset dp array before calculating the second case
        Arrays.fill(dp, -1);
        // take last house
        int second = money(1, n, dp, nums);

        return Math.max(first, second);
    }
}
