class Pair {
    int node;
    int wt;

    Pair(int node, int wt) {
        this.node = node;
        this.wt = wt;
    }
}

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < times.length; i++) {
            adj.get(times[i][0]).add(new Pair(times[i][1], times[i][2]));
        }

        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        if (k <= n) {
            dist[k] = 0;
        }

        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(k, 0));

        while (!q.isEmpty()) {
            Pair p = q.poll();
            int node = p.node;
            int cost = p.wt;

            for (Pair it : adj.get(node)) {
                int adjN = it.node;
                int adjW = it.wt;

                if (adjW + cost < dist[adjN]) {
                    dist[adjN] = adjW + cost;
                    q.add(new Pair(adjN, adjW + cost));
                }
            }
        }

        int maxi = Integer.MIN_VALUE;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                return -1;
            }
            maxi = Math.max(maxi, dist[i]);
        }
        return maxi;
    }
}
