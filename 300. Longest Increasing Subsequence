class Solution {
//     public int solve(int[] nums, int idx, int prev, int[][] dp) {
//         if (idx == nums.length) {
//             return 0;
//         }
//         if (dp[idx][prev+1] != -1) {
//             return dp[idx][prev+1];
//         }
//         int take = 0;
//         if (prev == -1 || nums[idx] > nums[prev]) {
//             take = 1 + solve(nums, idx + 1, idx, dp);
//         }
//         int notTake = 0 + solve(nums, idx + 1, prev, dp);
//         return dp[idx][prev+1] = Math.max(take, notTake);
//     }

//     public int lengthOfLIS(int[] nums) {
//         int[][] dp = new int[nums.length + 1][nums.length];
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return solve(nums, 0, -1,dp);
//     }
// }

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }

        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }

        int maxLIS = 1;
        for (int length : dp) {
            maxLIS = Math.max(maxLIS, length);
        }

        return maxLIS;
    }
}

