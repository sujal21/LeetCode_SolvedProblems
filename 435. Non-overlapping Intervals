class Interval {
    int start;
    int end;

    Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

class Comp implements Comparator<Interval> {
    @Override
    public int compare(Interval i1, Interval i2) {
        if (i1.end < i2.end) {
            return -1;
        } else if (i1.end > i2.end) {
            return 1;
        } else {
            // If end times are equal, use start times as a tiebreaker
            return Integer.compare(i1.start, i2.start);
        }
    }
}

public class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }

        ArrayList<Interval> list = new ArrayList<>();
        for (int i = 0; i < intervals.length; i++) {
            list.add(new Interval(intervals[i][0], intervals[i][1]));
        }

        Comp c = new Comp();
        Collections.sort(list, c);

        int count = 1;
        int end = list.get(0).end;

        for (int i = 1; i < list.size(); i++) {
            if (list.get(i).start >= end) {
                count++;
                end = list.get(i).end;
            }
        }
        int removals = list.size() - count;
        return removals;
    }
}
